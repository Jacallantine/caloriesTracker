// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Map{
  mapId String @id @default(uuid())
  mapName String
  isActive Boolean
  isHp Boolean
  isSnd Boolean
  isControl Boolean
  

 player PlayerInstance[]

}
model Team{ 
  teamId String @id @default(uuid()) 
  teamName String
  userId String

  player Player[]
  user User @relation(fields:[userId], references:[userId])
  
}
model Player{

  playerId String @id @default(uuid())
  playerName String
  userId String
  teamId String 

  team Team @relation(fields:[teamId], references:[teamId])
  user User @relation(fields:[userId], references:[userId])
  playerInstance PlayerInstance[]
}

model PlayerInstance{
  instanceId String @id @default(uuid())
  playerId String
  mapId String 
  kills Int
  deaths Int
  hillTime Int
  plants Int
  defuses Int
  isAR Boolean
  isSub Boolean
  isFlex Boolean
  controlTicks Int


  player Player @relation(fields:[playerId], references:[playerId])
  map Map @relation(fields:[mapId], references:[mapId])

}



model User {
  userId    String @id @default(uuid())
  firstName String
  lastName  String
  email     String
  password String @default("test")
  calorieLimit Int @default(0)

  foods Food[]
  days  Day[]
  dayToFoodBridge DayToFoodBridge[]
  session Session[]
  task Task[]
  player Player[]
  team Team[]
}

model Task{
  userId String
  taskId  String @id @default(uuid())
  taskName String
  taskDesc String
  taskTime String
  user User @relation(fields:[userId], references:[userId])
}

model Session {
  sessionId String @id
  userId String
  user User @relation(fields:[userId], references:[userId])
}

model Food {
  foodId   String @id @default(uuid())
  userId   String
  foodName String
  brand    String
  calories Int
  isActive Boolean @default(true)

  user User @relation(fields: [userId], references: [userId])
  days DayToFoodBridge[]
}

model Day {
  dayId  String @id @default(uuid())
  date   String
  userId String

  user  User @relation(fields: [userId], references: [userId])
  foods DayToFoodBridge[]

  @@unique([userId, date])
}

model DayToFoodBridge {
  foodId String
  dayId  String
  userId String 
  count Int

  food Food @relation(fields: [foodId], references: [foodId])
  day  Day  @relation(fields: [dayId], references: [dayId])
  user User @relation(fields: [userId], references: [userId])
  @@id([foodId, dayId, userId])
}
